package tester;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

/** *
 * @author lucasb
 * Syncronized counting and adding to an AtomicInteger object
 */
public class TestClass {
    boolean synched = true; //Change to false to turn off sunchronized Execution   
    static int SheepToAdd = 5000;
    private AtomicInteger sheepCount = new AtomicInteger(0);
    private void incrementAndReport() {
        if(synched){
            synchronized(this) {
                System.out.print((sheepCount.incrementAndGet())+" \n");
            }
        }else{
            System.out.print((sheepCount.incrementAndGet())+" \n");
        }

    }
    public static void main(String[] args) {
        ExecutorService service = null;
        try {
            service = Executors.newFixedThreadPool(20);
            TestClass sheepManager = new TestClass();            
            for(int i=0; i< SheepToAdd; i++){
                service.submit(() -> sheepManager.incrementAndReport());
            }             
        } finally {
          if(service != null) service.shutdown();
        }
    }
}
